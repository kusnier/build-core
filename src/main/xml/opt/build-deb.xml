<?xml version="1.0" encoding="UTF-8"?>
<project name="xp-framework-deb" basedir=".">
  
  <property name="build.debdir" value="${build.origdir}/debian"/>
  <property file="${build.debdir}/build.properties" prefix="deb.prop"/>
  <property name="build.target.deb.data" value="${build.target.deb}${deb.prop.root}"/>
  <property name="build.target.deb.ctl" value="${build.target.deb}/DEBIAN/"/>

  <target name="-deb:compile:clear" depends="-app:compile:clear"/>

  <target name="-deb:compile" extensionOf="pre-package" depends="-app:compile"/>

  <target name="deb:pre-package" extensionOf="pre-package" depends="app:pre-package">

    <!-- Just copy all data from app build -->
    <copy todir="${build.target.deb.data}/${ivy.module}-${ivy.new.revision}/${ivy.module}">
      <fileset dir="${build.target.app}" excludes="**/.extracted"/>
    </copy>
  
    <!-- Calculate package installation size -->
    <length property="deb.length" mode="all">
      <fileset dir="${build.target.deb.data}" includes="**"/>
    </length>
    <math result="deb.length.kb" operation="/" operand1="${deb.length}" operand2="1024" datatype="int"/>
  
    <!-- Declare tokens searched and replaced when copying files -->
    <filterset id="copy.tokens">
      <filter token="size" value="${deb.length.kb}"/>
      <filter token="module" value="${ivy.module}"/>
      <filter token="version" value="${ivy.new.revision}"/>
      <filter token="organisation" value="${ivy.organisation}"/>
      <filter token="BASEPATH" value="${deb.prop.root}/${ivy.module}-${ivy.new.revision}"/>
      <filter token="MODULENAME" value="${ivy.module}"/>
    </filterset>
    
    <!-- Copy configured paths -->
    <propertyselector property="copy.list" match="deb\.prop\.copy\..*"/>
    <if>
      <isset property="copy.list"/>
      <then>
        <for list="${copy.list}" param="copy.list.item">
          <sequential>
            <propertycopy property="resource" from="@{copy.list.item}" override="true"/>
            <propertyregex property="copy.from" input="${resource}" regexp="([^:]+):.+" select="\1" override="true"/>
            <propertyregex property="copy.to"   input="${resource}" regexp="[^:]+:([^:]+)" select="\1" override="true"/>
            <propertyregex property="copy.perm" input="${resource}" regexp="[^:]+:[^:]+:([^:]+)" select="\1" override="true"/>
            
            <!-- Check for copy root directory (file or directory specified) -->
            <var name="copy.from.root" unset="true"/>
            <var name="copy.from.selector" unset="true"/>
            <var name="copy.to.root" unset="true"/>
            <if>
              <matches string="${copy.from}" pattern="/$"/>
              <then>
                <var name="copy.from.root" value="${copy.from}"/>
                <var name="copy.from.selector" value="**"/>
              </then>
              <else>
                <propertyregex property="copy.from.root" input="${copy.from}" regexp="(.*)/[^/]+" select="\1"/>
                <propertyregex property="copy.from.selector" input="${copy.from}" regexp=".*/([^/]+)" select="\1"/>
              </else>
            </if>
            <if>
              <matches string="${copy.to}" pattern="^/"/>
              <then><var name="copy.to.root" value="${build.target.deb}/${copy.to}"/></then>
              <else><var name="copy.to.root" value="${build.target.deb.data}/${ivy.module}-${ivy.new.revision}/${ivy.module}/${copy.to}"/></else>
            </if>
            <copy todir="${copy.to.root}" overwrite="true">
              <fileset dir="${build.target.app}/${copy.from.root}" includes="${copy.from.selector}"/>
              <filterset refid="copy.tokens"/>
            </copy>
            <if>
              <isset property="copy.perm"/>
              <then>
                <chmod perm="${copy.perm}">
                  <fileset dir="${copy.to.root}" includes="${copy.from.selector}"/>
                </chmod>
              </then>
            </if>
          </sequential>
        </for>
      </then>
    </if>
  </target>
  
  <target name="deb:package:descriptor" extensionOf="pre-package" depends="app:package:descriptor">
    
    <!-- Copy debian control files and replace some tokens -->
    <copy todir="${build.target.deb.ctl}">
      <fileset dir="${build.debdir}">
        <exclude name="build.properties"/>
      </fileset>
      <filterset refid="copy.tokens"/>
    </copy>
    
    <!-- Explicitely set file permission to make them executable -->
    <chmod file="${build.target.deb.ctl}/preinst" perm="0775"/>
    <chmod file="${build.target.deb.ctl}/postinst" perm="0775"/>
    <chmod file="${build.target.deb.ctl}/prerm" perm="0775"/>
    <chmod file="${build.target.deb.ctl}/postrm" perm="0775"/>
  </target>

  <target name="deb:package" extensionOf="package" depends="app:package">
  
    <!-- Build package using dpkg-deb -->
    <exec executable="fakeroot">
      <arg value="dpkg-deb"/>
      <arg value="-b"/>
      <arg value="${build.target.deb}"/>
      <arg value="${build.target}/${ivy.module}-${ivy.new.revision}.deb"/>
    </exec>
    <echo>     * ${build.target}/${ivy.module}-${ivy.new.revision}.deb</echo>
  </target>
</project>
