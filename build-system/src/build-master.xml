<?xml version="1.0"?>
<project name="xp-framework-master" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
  <dirname property="include.base" file="${ant.file.xp-framework-master}"/>
  <import file="${include.base}/build-lifecycle.xml"/>
  <import file="${include.base}/build-installivy.xml"/>
  <import file="${include.base}/build-xpmacro.xml"/>

  <!-- 
   ! Section configuration
   !
   ! Configurable (public) settings
   !-->
  <path id="build.sourceDirectory" path="${basedir}/src/main/"/>
  <path id="build.testSourceDirectory" path="${basedir}/src/test/"/>
  <fileset id="build.testConfigurations" dir="${basedir}">
    <include name="unittest.ini"/>
  </fileset>

  <!-- RELEASE or INTEGRATION -->
  <property name="ivy.publish.status" value="integration"/>
  
  <!-- -SNAPSHOT or empty -->
  <property name="project.qualifier" value=""/>
  
  <!-- Private settings -->
  <property name="build.target" value="${basedir}/target"/>
  <property name="build.target.classes" value="${build.target}/classes"/>
  <property name="build.target.testClasses" value="${build.target}/test-classes"/>
  <property name="project.generated.ivy.file" value="${build.target}/ivy.xml"/>
  <property name="project.generated.pom.file" value="${build.target}/pom.xml"/>
  
  <available property="build.test.exist.unittest.ini" file="${basedir}/unittest.ini"/>
  
  <target name="setup-ivy" extensionOf="prepare" depends="install-ivy">
    <ivy:settings file="${include.base}/ivysettings.xml"/>
  </target>
  
  <target name="ivy-info">
    <ivy:info/>
  </target>

  <target name="xp.setup.paths" extensionOf="prepare">
    <ivy:resolve/>
    
    <ivy:cachefileset
     type="zip"
     setid="build.bootstrap"
    />

    <unzip dest="${build.target}/bootstrap">
      <fileset refid="build.bootstrap"/>
    </unzip>
  </target>
  
  <target name="xp.compile.sources" extensionOf="compile">
    <mkdir dir="${build.target.classes}"/>
    <copy todir="${build.target.classes}">
      <path refid="build.sourceDirectory"/>
    </copy>
  </target>
  
  <target name="xp.compile.tests" extensionOf="compile">
    <mkdir dir="${build.target.testClasses}"/>
    <copy todir="${build.target.testClasses}">
      <path refid="build.testSourceDirectory"/>
    </copy>
  </target>
  
  <target name="xp.test.createpath">
    <!-- Build classpath for unittests -->
    <ivy:cachefileset
     type="xar"
     conf="default,test"
     setid="test.path.dependencies"
    />
    <pathconvert property="test.path" pathsep="&#10;">
      <path>
        <fileset refid="test.path.dependencies"/>
        <pathelement path="${build.target}/bootstrap"/>
        <pathelement path="${build.target.testClasses}"/>
        <pathelement path="${build.target.classes}"/>
      </path>
    </pathconvert>
    
    <!-- Generate ivy.pth for use by tests -->
    <echo file="${build.target}/bootstrap/ivy.pth">${test.path}</echo>
    <pathconvert property="test.use_xp">
      <path>
        <pathelement path="${build.target}/bootstrap"/>
      </path>
    </pathconvert>
  </target>
  
  <target name="xp.test.byini" unless="skip.tests" depends="xp.test.createpath">
    <echo>===> Testing (.ini) ${ivy.organisation}#${ivy.module}</echo>
    
    <!-- Execute unittest for each .ini file -->
    <apply
     executable="unittest"
     failonerror="true"
     dir="${build.target}/bootstrap"
    >
      <env key="USE_XP" value="${test.use_xp}"/>
      <fileset refid="build.testConfigurations"/>
      <srcfile/>
    </apply>
  </target>
  
  <target name="xp.test.bypackage" if="build.testPackage" depends="xp.test.createpath">
    <echo>===> Testing (package) ${ivy.organisation}#${ivy.module}</echo>
    
    <!-- Execute unittest -->
    <exec
     executable="unittest"
     failonerror="true"
    >
      <env key="USE_XP" value="${build.target}/bootstrap/"/>
      <arg value="${build.testPackage}"/>
    </exec>
  </target>
  
  <target name="xp.test" extensionOf="test" depends="xp.test.byini,xp.test.bypackage"/>
  
  <target name="xp.package.sources" extensionOf="package" depends="ivy-info">
    <xar dir="${build.target}/classes" 
     target="${build.target}/${ivy.module}-${ivy.revision}.xar"
    />
  </target>
  
  <target name="xp.package.tests" extensionOf="package" depends="ivy-info">
    <xar dir="${build.target}/test-classes" 
     target="${build.target}/${ivy.module}-test-${ivy.revision}.xar"
    />
  </target>
  
  <target name="xp.package.meta" extensionOf="package" depends="ivy-info, xp.package.sources, xp.package.tests">
    <echo>===> Packaging ${ivy.organisation}#${ivy.module}</echo>
    
    <ivy:resolve/>
    <ivy:deliver
     deliverpattern="${build.target}/ivy.xml"
     revision="${ivy.revision}${project.qualifier}"
     pubrevision="${ivy.revision}${project.qualifier}"
     pubdate="now"
     status="${ivy.publish.status}"
    />
    
    <ivy:makepom
     ivyfile="${build.target}/ivy.xml"
     pomfile="${build.target}/pom.xml"
     printIvyInfo="false"
    />
  </target>
  
  <target name="xp.install" extensionOf="install" depends="ivy-info">
    <echo>===> Installing ${ivy.organisation}#${ivy.module} @ local</echo>

    <ivy:publish
     artifactspattern="${build.target}/[artifact]-[revision].[ext]"
     resolver="local"
     revision="${ivy.revision}${project.qualifier}"
     pubrevision="${ivy.revision}${project.qualifier}"
     pubdate="now"
     overwrite="true"
     publishivy="true"
     status="${ivy.publish.status}"
    />
  </target>
  
  <target name="xp.deploy" extensionOf="deploy" depends="ivy-info">
    <echo>===> Deploying ${ivy.organisation}#${ivy.module} @ public-authenticated</echo>
    <ivy:publish
     artifactspattern="${build.target}/[artifact]-[revision].[ext]"
     resolver="public-authenticated"
     revision="${ivy.revision}${project.qualifier}"
     pubrevision="${ivy.revision}${project.qualifier}"
     pubdate="now"
     overwrite="true"
     publishivy="true"
     status="${ivy.publish.status}"
    />
  </target>

  <target name="xp.clean.ivycache" extensionOf="clean" depends="ivy-info">
    <ivy:cleancache/>
  </target>
  
  <target name="xp.clean" extensionOf="clean">
    <delete dir="${build.target}"/>
  </target>
</project>
